import yaml

def generateToJson(name, attributes):
    json = "\tMap<String, dynamic> toJson() => {\n"

    for attr in attributes:
        json += "\t\t\"" + attr + "\": " + attr + ",\n"

    json += "\t\t\"type\": \"" + name + "\"\n"    
    json += "\t};\n"
    return json

def generateFromJson(name, attributes):
    json = "\tstatic " + name + " fromJson(Map<String, dynamic> json) => " + name + "(\n"

    for attr in attributes:
        json += "\t\t" + attr + ": json[\"" + attr + "\"]!,\n" 
    
    json += "\t);\n"
    
    return json

def generateBuilder(builderName, builderBaseClass, classes):
    func = builderBaseClass + f"? get{builderName}FromJson(Map<String, dynamic> json) " + "{\n"
    func += "\tswitch(json[\"type\"]!) {\n"

    for c in classes:
        func += "\t\tcase \"" + c["name"] + "\": return " + c["name"] + ".fromJson(json);\n"
    
    func += "\t\tdefault: return null;\n"
    func += "\t}\n"
    func += "}\n"
    return func

def main():
    with open("data_classes.yaml", "r") as f:
        data = yaml.load(f.read(), Loader=yaml.Loader)

    for f in data["files"]:
        # Generate imports
        content = "//// AUTO-GENERATED by tools/generate_data_classes.py ////\n"
        content += "/// DO NOT EDIT BY HAND\n"

        partof = f.get("partof", "")
        if partof:
            content += "part of \"" + partof + "\";\n\n"
        
        # Generate classes
        for c in f.get("classes", []):
            extends = ", ".join(c["extends"])
            implements = ", ".join(c["implements"])
            content += f"class {c['name']} extends {extends} implements {implements}" + " {\n"
            for attr in c["attributes"]:
                content += "\tfinal {} {};\n".format(c["attributes"][attr], attr)
            content += "\n"

            content += "\t" + c["name"] + "({ " + ", ".join([ "required this." + name for name in c["attributes"]]) + " });\n\n"

            content += "\t// JSON stuff\n"
            content += generateToJson(c["name"], c["attributes"])
            content += generateFromJson(c["name"], c["attributes"])
            
            content += "}\n\n"

        if f["generate_builder"]:
            content += generateBuilder(
                f["builder_name"],
                f["builder_baseclass"],
                f.get("classes", [])
            )
            
        with open(f["path"], "w") as file_:
            file_.write(content[:-1])
            print("[i] Wrote " + f["path"])
        

if __name__ == "__main__":
    main()
